
RobockeyLars.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000052a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  000005c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001066  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000343  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067e  00000000  00000000  00001a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000358  00000000  00000000  00002120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001981  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00004365  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_10>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ea e2       	ldi	r30, 0x2A	; 42
 174:	f5 e0       	ldi	r31, 0x05	; 5
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ab 30       	cpi	r26, 0x0B	; 11
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
 196:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <main>:
#include <stdint.h>



void main() 
{
 19e:	08 95       	ret

000001a0 <__vector_10>:
			case 60: UEDATX = *buffer++;
			case 59: UEDATX = *buffer++;
			case 58: UEDATX = *buffer++;
			case 57: UEDATX = *buffer++;
			case 56: UEDATX = *buffer++;
			case 55: UEDATX = *buffer++;
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
			case 54: UEDATX = *buffer++;
 1ac:	9f 93       	push	r25
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
 1b2:	e1 ee       	ldi	r30, 0xE1	; 225
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	10 82       	st	Z, r1
 1ba:	83 ff       	sbrs	r24, 3
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <__vector_10+0x40>
			case 58: UEDATX = *buffer++;
			case 57: UEDATX = *buffer++;
			case 56: UEDATX = *buffer++;
			case 55: UEDATX = *buffer++;
			case 54: UEDATX = *buffer++;
			case 53: UEDATX = *buffer++;
 1be:	10 92 e9 00 	sts	0x00E9, r1
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	90 93 eb 00 	sts	0x00EB, r25
 1c8:	10 92 ec 00 	sts	0x00EC, r1
 1cc:	92 e1       	ldi	r25, 0x12	; 18
			case 52: UEDATX = *buffer++;
 1ce:	90 93 ed 00 	sts	0x00ED, r25
 1d2:	98 e0       	ldi	r25, 0x08	; 8
 1d4:	90 93 f0 00 	sts	0x00F0, r25
 1d8:	10 92 0a 01 	sts	0x010A, r1
 1dc:	10 92 08 01 	sts	0x0108, r1
			case 51: UEDATX = *buffer++;
 1e0:	82 ff       	sbrs	r24, 2
 1e2:	13 c0       	rjmp	.+38     	; 0x20a <__vector_10+0x6a>
 1e4:	80 91 0a 01 	lds	r24, 0x010A
 1e8:	88 23       	and	r24, r24
 1ea:	79 f0       	breq	.+30     	; 0x20a <__vector_10+0x6a>
 1ec:	80 91 09 01 	lds	r24, 0x0109
			case 50: UEDATX = *buffer++;
 1f0:	88 23       	and	r24, r24
 1f2:	59 f0       	breq	.+22     	; 0x20a <__vector_10+0x6a>
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	80 93 09 01 	sts	0x0109, r24
 1fa:	81 11       	cpse	r24, r1
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <__vector_10+0x6a>
 1fe:	84 e0       	ldi	r24, 0x04	; 4
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 200:	80 93 e9 00 	sts	0x00E9, r24
			case 54: UEDATX = *buffer++;
			case 53: UEDATX = *buffer++;
			case 52: UEDATX = *buffer++;
			case 51: UEDATX = *buffer++;
			case 50: UEDATX = *buffer++;
			case 49: UEDATX = *buffer++;
 204:	8a e3       	ldi	r24, 0x3A	; 58
 206:	80 93 e8 00 	sts	0x00E8, r24
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
			case 48: UEDATX = *buffer++;
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_11>:
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 222:	0f 92       	push	r0
			case 52: UEDATX = *buffer++;
			case 51: UEDATX = *buffer++;
			case 50: UEDATX = *buffer++;
			case 49: UEDATX = *buffer++;
			case 48: UEDATX = *buffer++;
			case 47: UEDATX = *buffer++;
 224:	11 24       	eor	r1, r1
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
			case 46: UEDATX = *buffer++;
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ef 93       	push	r30
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 244:	ff 93       	push	r31
			case 50: UEDATX = *buffer++;
			case 49: UEDATX = *buffer++;
			case 48: UEDATX = *buffer++;
			case 47: UEDATX = *buffer++;
			case 46: UEDATX = *buffer++;
			case 45: UEDATX = *buffer++;
 246:	10 92 e9 00 	sts	0x00E9, r1
 24a:	80 91 e8 00 	lds	r24, 0x00E8
 24e:	83 ff       	sbrs	r24, 3
 250:	4e c1       	rjmp	.+668    	; 0x4ee <__vector_11+0x2d2>
 252:	e1 ef       	ldi	r30, 0xF1	; 241
 254:	f0 e0       	ldi	r31, 0x00	; 0
			case 44: UEDATX = *buffer++;
 256:	c0 81       	ld	r28, Z
 258:	40 81       	ld	r20, Z
 25a:	20 81       	ld	r18, Z
 25c:	80 81       	ld	r24, Z
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	38 2b       	or	r19, r24
 262:	80 81       	ld	r24, Z
 264:	50 81       	ld	r21, Z
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 266:	90 e0       	ldi	r25, 0x00	; 0
			case 48: UEDATX = *buffer++;
			case 47: UEDATX = *buffer++;
			case 46: UEDATX = *buffer++;
			case 45: UEDATX = *buffer++;
			case 44: UEDATX = *buffer++;
			case 43: UEDATX = *buffer++;
 268:	bc 01       	movw	r22, r24
 26a:	75 2b       	or	r23, r21
 26c:	b0 81       	ld	r27, Z
 26e:	a0 81       	ld	r26, Z
 270:	82 ef       	ldi	r24, 0xF2	; 242
 272:	80 93 e8 00 	sts	0x00E8, r24
 276:	46 30       	cpi	r20, 0x06	; 6
			case 42: UEDATX = *buffer++;
 278:	09 f0       	breq	.+2      	; 0x27c <__vector_11+0x60>
 27a:	58 c0       	rjmp	.+176    	; 0x32c <__vector_11+0x110>
 27c:	04 c0       	rjmp	.+8      	; 0x286 <__vector_11+0x6a>
 27e:	81 e2       	ldi	r24, 0x21	; 33
 280:	80 93 eb 00 	sts	0x00EB, r24
 284:	3b c1       	rjmp	.+630    	; 0x4fc <__vector_11+0x2e0>
 286:	c6 e0       	ldi	r28, 0x06	; 6
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 288:	8c ea       	ldi	r24, 0xAC	; 172
			case 46: UEDATX = *buffer++;
			case 45: UEDATX = *buffer++;
			case 44: UEDATX = *buffer++;
			case 43: UEDATX = *buffer++;
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	fc 01       	movw	r30, r24
 28e:	45 91       	lpm	r20, Z+
 290:	54 91       	lpm	r21, Z
 292:	24 17       	cp	r18, r20
 294:	35 07       	cpc	r19, r21
 296:	11 f0       	breq	.+4      	; 0x29c <__vector_11+0x80>
 298:	07 96       	adiw	r24, 0x07	; 7
			case 40: UEDATX = *buffer++;
 29a:	23 c0       	rjmp	.+70     	; 0x2e2 <__vector_11+0xc6>
 29c:	fc 01       	movw	r30, r24
 29e:	32 96       	adiw	r30, 0x02	; 2
 2a0:	45 91       	lpm	r20, Z+
 2a2:	54 91       	lpm	r21, Z
 2a4:	64 17       	cp	r22, r20
 2a6:	75 07       	cpc	r23, r21
 2a8:	11 f0       	breq	.+4      	; 0x2ae <__vector_11+0x92>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2aa:	07 96       	adiw	r24, 0x07	; 7
			case 44: UEDATX = *buffer++;
			case 43: UEDATX = *buffer++;
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
 2ac:	1a c0       	rjmp	.+52     	; 0x2e2 <__vector_11+0xc6>
 2ae:	fc 01       	movw	r30, r24
 2b0:	34 96       	adiw	r30, 0x04	; 4
 2b2:	25 91       	lpm	r18, Z+
 2b4:	34 91       	lpm	r19, Z
 2b6:	fc 01       	movw	r30, r24
 2b8:	36 96       	adiw	r30, 0x06	; 6
 2ba:	54 91       	lpm	r21, Z
			case 38: UEDATX = *buffer++;
 2bc:	8b 2f       	mov	r24, r27
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	9a 2b       	or	r25, r26
 2c2:	8f 3f       	cpi	r24, 0xFF	; 255
 2c4:	91 05       	cpc	r25, r1
 2c6:	19 f0       	breq	.+6      	; 0x2ce <__vector_11+0xb2>
 2c8:	10 f0       	brcs	.+4      	; 0x2ce <__vector_11+0xb2>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2cc:	90 e0       	ldi	r25, 0x00	; 0
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
 2ce:	85 17       	cp	r24, r21
 2d0:	08 f4       	brcc	.+2      	; 0x2d4 <__vector_11+0xb8>
 2d2:	58 2f       	mov	r21, r24
 2d4:	a8 ee       	ldi	r26, 0xE8	; 232
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	70 e1       	ldi	r23, 0x10	; 16
 2da:	6e ef       	ldi	r22, 0xFE	; 254
 2dc:	c1 ef       	ldi	r28, 0xF1	; 241
			case 36: UEDATX = *buffer++;
 2de:	d0 e0       	ldi	r29, 0x00	; 0
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <__vector_11+0xcc>
 2e2:	c1 50       	subi	r28, 0x01	; 1
 2e4:	99 f6       	brne	.-90     	; 0x28c <__vector_11+0x70>
 2e6:	cb cf       	rjmp	.-106    	; 0x27e <__vector_11+0x62>
 2e8:	8c 91       	ld	r24, X
 2ea:	98 2f       	mov	r25, r24
 2ec:	95 70       	andi	r25, 0x05	; 5
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2ee:	e1 f3       	breq	.-8      	; 0x2e8 <__vector_11+0xcc>
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
			case 36: UEDATX = *buffer++;
			case 35: UEDATX = *buffer++;
 2f0:	82 fd       	sbrc	r24, 2
 2f2:	04 c1       	rjmp	.+520    	; 0x4fc <__vector_11+0x2e0>
 2f4:	45 2f       	mov	r20, r21
 2f6:	51 31       	cpi	r21, 0x11	; 17
 2f8:	08 f0       	brcs	.+2      	; 0x2fc <__vector_11+0xe0>
 2fa:	47 2f       	mov	r20, r23
 2fc:	44 23       	and	r20, r20
 2fe:	09 f4       	brne	.+2      	; 0x302 <__vector_11+0xe6>
			case 34: UEDATX = *buffer++;
 300:	fa c0       	rjmp	.+500    	; 0x4f6 <__vector_11+0x2da>
 302:	f9 01       	movw	r30, r18
 304:	84 2f       	mov	r24, r20
 306:	94 91       	lpm	r25, Z
 308:	98 83       	st	Y, r25
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	31 96       	adiw	r30, 0x01	; 1
 30e:	81 11       	cpse	r24, r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 310:	fa cf       	rjmp	.-12     	; 0x306 <__vector_11+0xea>
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
			case 36: UEDATX = *buffer++;
			case 35: UEDATX = *buffer++;
			case 34: UEDATX = *buffer++;
			case 33: UEDATX = *buffer++;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	84 0f       	add	r24, r20
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	28 0f       	add	r18, r24
 31c:	39 1f       	adc	r19, r25
 31e:	54 1b       	sub	r21, r20
 320:	6c 93       	st	X, r22
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 322:	51 11       	cpse	r21, r1
 324:	e1 cf       	rjmp	.-62     	; 0x2e8 <__vector_11+0xcc>
 326:	40 31       	cpi	r20, 0x10	; 16
 328:	f9 f2       	breq	.-66     	; 0x2e8 <__vector_11+0xcc>
 32a:	e8 c0       	rjmp	.+464    	; 0x4fc <__vector_11+0x2e0>
 32c:	45 30       	cpi	r20, 0x05	; 5
 32e:	61 f4       	brne	.+24     	; 0x348 <__vector_11+0x12c>
 330:	8e ef       	ldi	r24, 0xFE	; 254
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 332:	80 93 e8 00 	sts	0x00E8, r24
			case 34: UEDATX = *buffer++;
			case 33: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
 336:	e8 ee       	ldi	r30, 0xE8	; 232
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	80 ff       	sbrs	r24, 0
 33e:	fd cf       	rjmp	.-6      	; 0x33a <__vector_11+0x11e>
 340:	20 68       	ori	r18, 0x80	; 128
 342:	20 93 e3 00 	sts	0x00E3, r18
			case 30: UEDATX = *buffer++;
 346:	da c0       	rjmp	.+436    	; 0x4fc <__vector_11+0x2e0>
 348:	49 30       	cpi	r20, 0x09	; 9
 34a:	09 f0       	breq	.+2      	; 0x34e <__vector_11+0x132>
 34c:	36 c0       	rjmp	.+108    	; 0x3ba <__vector_11+0x19e>
 34e:	c1 11       	cpse	r28, r1
 350:	5f c0       	rjmp	.+190    	; 0x410 <__vector_11+0x1f4>
 352:	20 93 0a 01 	sts	0x010A, r18
			case 29: UEDATX = *buffer++;
 356:	10 92 08 01 	sts	0x0108, r1
 35a:	10 92 09 01 	sts	0x0109, r1
 35e:	8e ef       	ldi	r24, 0xFE	; 254
 360:	80 93 e8 00 	sts	0x00E8, r24
 364:	11 e0       	ldi	r17, 0x01	; 1
			case 28: UEDATX = *buffer++;
 366:	85 e5       	ldi	r24, 0x55	; 85
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	c9 ee       	ldi	r28, 0xE9	; 233
 36c:	d0 e0       	ldi	r29, 0x00	; 0
 36e:	ab ee       	ldi	r26, 0xEB	; 235
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	6c ee       	ldi	r22, 0xEC	; 236
 374:	70 e0       	ldi	r23, 0x00	; 0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 376:	4d ee       	ldi	r20, 0xED	; 237
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	18 83       	st	Y, r17
 37c:	9c 01       	movw	r18, r24
 37e:	2f 5f       	subi	r18, 0xFF	; 255
 380:	3f 4f       	sbci	r19, 0xFF	; 255
 382:	fc 01       	movw	r30, r24
 384:	04 91       	lpm	r16, Z
 386:	0c 93       	st	X, r16
			case 26: UEDATX = *buffer++;
 388:	00 23       	and	r16, r16
 38a:	61 f0       	breq	.+24     	; 0x3a4 <__vector_11+0x188>
 38c:	f9 01       	movw	r30, r18
 38e:	24 91       	lpm	r18, Z
 390:	fb 01       	movw	r30, r22
 392:	20 83       	st	Z, r18
 394:	9c 01       	movw	r18, r24
 396:	2d 5f       	subi	r18, 0xFD	; 253
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 398:	3f 4f       	sbci	r19, 0xFF	; 255
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
 39a:	fc 01       	movw	r30, r24
 39c:	32 96       	adiw	r30, 0x02	; 2
 39e:	84 91       	lpm	r24, Z
 3a0:	fa 01       	movw	r30, r20
 3a2:	80 83       	st	Z, r24
 3a4:	1f 5f       	subi	r17, 0xFF	; 255
 3a6:	15 30       	cpi	r17, 0x05	; 5
 3a8:	11 f0       	breq	.+4      	; 0x3ae <__vector_11+0x192>
			case 24: UEDATX = *buffer++;
 3aa:	c9 01       	movw	r24, r18
 3ac:	e6 cf       	rjmp	.-52     	; 0x37a <__vector_11+0x15e>
 3ae:	ea ee       	ldi	r30, 0xEA	; 234
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	8e e1       	ldi	r24, 0x1E	; 30
 3b4:	80 83       	st	Z, r24
 3b6:	10 82       	st	Z, r1
 3b8:	a1 c0       	rjmp	.+322    	; 0x4fc <__vector_11+0x2e0>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3ba:	48 30       	cpi	r20, 0x08	; 8
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
 3bc:	81 f4       	brne	.+32     	; 0x3de <__vector_11+0x1c2>
 3be:	c0 38       	cpi	r28, 0x80	; 128
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <__vector_11+0x1a8>
 3c2:	42 c0       	rjmp	.+132    	; 0x448 <__vector_11+0x22c>
 3c4:	e8 ee       	ldi	r30, 0xE8	; 232
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 ff       	sbrs	r24, 0
			case 22: UEDATX = *buffer++;
 3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <__vector_11+0x1ac>
 3ce:	80 91 0a 01 	lds	r24, 0x010A
 3d2:	80 93 f1 00 	sts	0x00F1, r24
 3d6:	8e ef       	ldi	r24, 0xFE	; 254
 3d8:	80 93 e8 00 	sts	0x00E8, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3dc:	8f c0       	rjmp	.+286    	; 0x4fc <__vector_11+0x2e0>
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
 3de:	41 32       	cpi	r20, 0x21	; 33
 3e0:	b9 f4       	brne	.+46     	; 0x410 <__vector_11+0x1f4>
 3e2:	c1 3a       	cpi	r28, 0xA1	; 161
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <__vector_11+0x1cc>
 3e6:	40 c0       	rjmp	.+128    	; 0x468 <__vector_11+0x24c>
 3e8:	e8 ee       	ldi	r30, 0xE8	; 232
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
			case 20: UEDATX = *buffer++;
 3ee:	80 ff       	sbrs	r24, 0
 3f0:	fd cf       	rjmp	.-6      	; 0x3ec <__vector_11+0x1d0>
 3f2:	e0 e0       	ldi	r30, 0x00	; 0
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	87 e0       	ldi	r24, 0x07	; 7
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	a1 ef       	ldi	r26, 0xF1	; 241
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3fe:	21 91       	ld	r18, Z+
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
			case 20: UEDATX = *buffer++;
			case 19: UEDATX = *buffer++;
 400:	2c 93       	st	X, r18
 402:	e8 17       	cp	r30, r24
 404:	f9 07       	cpc	r31, r25
 406:	d9 f7       	brne	.-10     	; 0x3fe <__vector_11+0x1e2>
 408:	8e ef       	ldi	r24, 0xFE	; 254
 40a:	80 93 e8 00 	sts	0x00E8, r24
 40e:	76 c0       	rjmp	.+236    	; 0x4fc <__vector_11+0x2e0>
			case 18: UEDATX = *buffer++;
 410:	40 32       	cpi	r20, 0x20	; 32
 412:	d1 f4       	brne	.+52     	; 0x448 <__vector_11+0x22c>
 414:	c1 32       	cpi	r28, 0x21	; 33
 416:	09 f0       	breq	.+2      	; 0x41a <__vector_11+0x1fe>
 418:	43 c0       	rjmp	.+134    	; 0x4a0 <__vector_11+0x284>
 41a:	e8 ee       	ldi	r30, 0xE8	; 232
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 420:	82 ff       	sbrs	r24, 2
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
			case 20: UEDATX = *buffer++;
			case 19: UEDATX = *buffer++;
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
 422:	fd cf       	rjmp	.-6      	; 0x41e <__vector_11+0x202>
 424:	e0 e0       	ldi	r30, 0x00	; 0
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	a1 ef       	ldi	r26, 0xF1	; 241
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	2c 91       	ld	r18, X
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 432:	21 93       	st	Z+, r18
 434:	e8 17       	cp	r30, r24
 436:	f9 07       	cpc	r31, r25
 438:	d9 f7       	brne	.-10     	; 0x430 <__vector_11+0x214>
 43a:	e8 ee       	ldi	r30, 0xE8	; 232
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	8b ef       	ldi	r24, 0xFB	; 251
 440:	80 83       	st	Z, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 442:	8e ef       	ldi	r24, 0xFE	; 254
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
 444:	80 83       	st	Z, r24
 446:	5a c0       	rjmp	.+180    	; 0x4fc <__vector_11+0x2e0>
 448:	42 32       	cpi	r20, 0x22	; 34
 44a:	71 f4       	brne	.+28     	; 0x468 <__vector_11+0x24c>
 44c:	c1 32       	cpi	r28, 0x21	; 33
 44e:	09 f0       	breq	.+2      	; 0x452 <__vector_11+0x236>
 450:	4e c0       	rjmp	.+156    	; 0x4ee <__vector_11+0x2d2>
 452:	20 93 08 01 	sts	0x0108, r18
			case 14: UEDATX = *buffer++;
 456:	e8 ee       	ldi	r30, 0xE8	; 232
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	80 ff       	sbrs	r24, 0
 45e:	fd cf       	rjmp	.-6      	; 0x45a <__vector_11+0x23e>
 460:	8e ef       	ldi	r24, 0xFE	; 254
 462:	80 93 e8 00 	sts	0x00E8, r24
			case 13: UEDATX = *buffer++;
 466:	4a c0       	rjmp	.+148    	; 0x4fc <__vector_11+0x2e0>
 468:	41 11       	cpse	r20, r1
 46a:	1a c0       	rjmp	.+52     	; 0x4a0 <__vector_11+0x284>
 46c:	e8 ee       	ldi	r30, 0xE8	; 232
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	80 ff       	sbrs	r24, 0
 474:	fd cf       	rjmp	.-6      	; 0x470 <__vector_11+0x254>
			case 12: UEDATX = *buffer++;
 476:	c2 38       	cpi	r28, 0x82	; 130
 478:	51 f4       	brne	.+20     	; 0x48e <__vector_11+0x272>
 47a:	e9 ee       	ldi	r30, 0xE9	; 233
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	60 83       	st	Z, r22
 480:	80 91 eb 00 	lds	r24, 0x00EB
 484:	85 fb       	bst	r24, 5
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 486:	88 27       	eor	r24, r24
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
 488:	80 f9       	bld	r24, 0
 48a:	10 82       	st	Z, r1
 48c:	01 c0       	rjmp	.+2      	; 0x490 <__vector_11+0x274>
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	e1 ef       	ldi	r30, 0xF1	; 241
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 83       	st	Z, r24
 496:	10 82       	st	Z, r1
			case 10: UEDATX = *buffer++;
 498:	8e ef       	ldi	r24, 0xFE	; 254
 49a:	80 93 e8 00 	sts	0x00E8, r24
 49e:	2e c0       	rjmp	.+92     	; 0x4fc <__vector_11+0x2e0>
 4a0:	84 2f       	mov	r24, r20
 4a2:	8d 7f       	andi	r24, 0xFD	; 253
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	19 f5       	brne	.+70     	; 0x4ee <__vector_11+0x2d2>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4a8:	c2 30       	cpi	r28, 0x02	; 2
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
 4aa:	09 f5       	brne	.+66     	; 0x4ee <__vector_11+0x2d2>
 4ac:	23 2b       	or	r18, r19
 4ae:	f9 f4       	brne	.+62     	; 0x4ee <__vector_11+0x2d2>
 4b0:	6f 77       	andi	r22, 0x7F	; 127
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	86 0f       	add	r24, r22
 4b6:	84 30       	cpi	r24, 0x04	; 4
 4b8:	d0 f4       	brcc	.+52     	; 0x4ee <__vector_11+0x2d2>
			#endif
			case  8: UEDATX = *buffer++;
 4ba:	8e ef       	ldi	r24, 0xFE	; 254
 4bc:	80 93 e8 00 	sts	0x00E8, r24
 4c0:	60 93 e9 00 	sts	0x00E9, r22
 4c4:	43 30       	cpi	r20, 0x03	; 3
 4c6:	21 f4       	brne	.+8      	; 0x4d0 <__vector_11+0x2b4>
 4c8:	81 e2       	ldi	r24, 0x21	; 33
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4ca:	80 93 eb 00 	sts	0x00EB, r24
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
 4ce:	16 c0       	rjmp	.+44     	; 0x4fc <__vector_11+0x2e0>
 4d0:	89 e1       	ldi	r24, 0x19	; 25
 4d2:	80 93 eb 00 	sts	0x00EB, r24
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__vector_11+0x2c4>
			case  6: UEDATX = *buffer++;
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <__vector_11+0x2c0>
 4e4:	ea ee       	ldi	r30, 0xEA	; 234
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 83       	st	Z, r24
 4ea:	10 82       	st	Z, r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <__vector_11+0x2e0>
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
 4ee:	81 e2       	ldi	r24, 0x21	; 33
 4f0:	80 93 eb 00 	sts	0x00EB, r24
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <__vector_11+0x2e0>
 4f6:	6c 93       	st	X, r22
 4f8:	51 11       	cpse	r21, r1
 4fa:	f6 ce       	rjmp	.-532    	; 0x2e8 <__vector_11+0xcc>
 4fc:	ff 91       	pop	r31
			case  4: UEDATX = *buffer++;
 4fe:	ef 91       	pop	r30
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 50e:	6f 91       	pop	r22
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
			case  2: UEDATX = *buffer++;
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
